on:
  workflow_call:
    inputs:
      working_directory:
        type: string
        required: true
      simple_compilation_name:
        type: string
        required: false
      simple_compilation_extra_tus:
        type: string
        required: false
      compile_run_timeout_minutes:
        type: number
        default: 5
      compile_run_apple_timeout_minutes:
        type: number
        default: 5
      compile_run_msvc_timeout_minutes:
        type: number
        default: 5
      clang_tidy_extra:
        type: string
        required: false
      skip_ubuntu_libcxx:
        type: boolean
        default: false
      cppcheck_extra:
        type: string
        required: false
      max_lines:
        type: number
        required: true
      max_lines_ignored_iregex:
        type: string
        default:
      CMD_FIND_CPP:
        type: string
        default: $(find . -path './test-data' -prune -or \( -iname '*.cpp' -and -not -iname 'doctest_main.cpp' -or -iname '*.hpp' \) -print)
      CMD_FIND_C:
        type: string
        default: $(find . -path './test-data' -prune -or \( -iname '*.c' -or -iname '*.h' -and -not -iname 'doctest.h' \) -print)
      CMD_FIND_TU:
        type: string
        default: $(find . -path './test-data' -prune -or \( -iname '*.cpp' -and -not -iname 'doctest_main.cpp' -or -iname '*.c' \) -print)
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  # Static analysis should not really time out, and 1 minute is sometimes too little (may take 50s).
  clang-format:
    runs-on: hse-cpp-2024-lin-style
    timeout-minutes: 2
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}
    steps:
      - name: Download solution
        uses: actions/checkout@v4
      - name: Print clang-format version
        run: clang-format-15 --version
      - name: Run clang-format
        run: clang-format-15 --dry-run -Werror ${{inputs.CMD_FIND_C}} ${{inputs.CMD_FIND_CPP}}
  clang-tidy:
    runs-on: hse-cpp-2024-lin-style
    timeout-minutes: 2
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}
    steps:
      - name: Download solution
        uses: actions/checkout@v4
      - name: Print clang-tidy version
        run: clang-tidy-15 --version
      - name: Run clang-tidy
        run: clang-tidy-15 ${{inputs.CMD_FIND_CPP}} ${{inputs.clang_tidy_extra}}
  cppcheck:
    runs-on: hse-cpp-2024-lin-style
    timeout-minutes: 2
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}
    steps:
      - name: Download solution
        uses: actions/checkout@v4
      - name: Print cppcheck version
        run: cppcheck --version
      - name: Run cppcheck
        run: cppcheck -DSOME_DEFINE_TO_FIX_CONFIG --enable=all --suppressions-list=cppcheck-suppressions.txt --error-exitcode=1 --inline-suppr ${{inputs.CMD_FIND_TU}} ${{inputs.cppcheck_extra}}
  max-lines:
    runs-on: hse-cpp-2024-lin-style
    timeout-minutes: 1
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}
    steps:
      - name: Download solution
        uses: actions/checkout@v4
      - name: Remove ignored source files
        run: "find . -iname '*_test.cpp' -delete -or -iname 'doctest_main.cpp' -delete -or -iregex '${{inputs.max_lines_ignored_iregex}}' -delete &>/dev/null"
      - name: Print number of lines per file
        run: "wc -l ${{inputs.CMD_FIND_C}} ${{inputs.CMD_FIND_CPP}}"
      - name: Calculate total number of lines
        run: "cat ${{inputs.CMD_FIND_C}} ${{inputs.CMD_FIND_CPP}} | wc -l | tee lines.txt"
      - name: Check total number of lines
        run: "[[ $(cat lines.txt) -le ${{inputs.max_lines}} ]]"
  compile-run-lin-basic:
    strategy:
      matrix:
        compiler:  # Remember to match with 'compile-run-lin'
          - name: GCC
            command: g++-12
            version-flags: --version
            flags:
        sanitize:  # Remember to match with 'compile-run-lin'
          - name: ", ASan, Debug"
            flags: -g -fsanitize=undefined -fno-sanitize-recover=all -fsanitize=address -DEXPECT_ASAN
            run-prefix:
            simple-mode: gcc-debug
            cmake-flags: -DCMAKE_BUILD_TYPE=Debug
    uses: ./.github/workflows/compile-run-01.yml
    with:
      name: ${{ matrix.compiler.name }}${{ matrix.sanitize.name }}
      runs_on: hse-cpp-2024-lin-prod
      timeout_minutes: ${{matrix.compiler.timeout_minutes || inputs.compile_run_timeout_minutes}}
      working_directory: ${{inputs.working_directory}}
      compiler_command: ${{matrix.compiler.command}}
      compiler_version_flags: ${{matrix.compiler.version-flags}}
      compiler_msvc_env_prepare:
      flags: ${{matrix.compiler.flags}} ${{matrix.sanitize.flags}}
      run_prefix: ${{matrix.sanitize.run-prefix}}
      cmake_flags: ${{matrix.sanitize.cmake-flags}}
      cmake_build_flags: ${{matrix.sanitize.cmake-build-flags}}
      simple_compilation_name: ${{inputs.simple_compilation_name}}
      simple_compilation_mode: ${{matrix.sanitize.simple-mode}}
      simple_compilation_extra_tus: ${{inputs.simple_compilation_extra_tus}}

  compile-run-lin:
    needs: [clang-format, clang-tidy, cppcheck, max-lines, compile-run-lin-basic]
    strategy:
      matrix:
        compiler:  # Remember to match with 'compile-run-lin-basic'
          - name: GCC
            command: g++-12
            version-flags: --version
            flags:
          - name: Clang, libstdc++
            command: clang++-15
            version-flags: --version
            flags: -gdwarf-4 -stdlib=libstdc++
                # -gdwarf-4: compatibility with Valgrind, see https://bugs.kde.org/show_bug.cgi?id=452758
          - name: Clang, libc++
            command: clang++-15
            version-flags: --version
            flags: -gdwarf-4 -stdlib=libc++
        sanitize:  # Remember to match with 'compile-run-lin-basic'
          - name: ", Valgrind, Debug"
            flags: -g -fsanitize=undefined -fno-sanitize-recover=all -DEXPECT_VALGRIND
            run-prefix: valgrind --quiet --leak-check=full --error-exitcode=123
            simple-mode: gcc-debug
            cmake-flags: -DCMAKE_BUILD_TYPE=Debug
          - name: ", ASan, Debug"
            flags: -g -fsanitize=undefined -fno-sanitize-recover=all -fsanitize=address -DEXPECT_ASAN
            run-prefix:
            simple-mode: gcc-debug
            cmake-flags: -DCMAKE_BUILD_TYPE=Debug
          - name: ", Release"
            flags:
            run-prefix:
            simple-mode: gcc-release
            cmake-flags: -DCMAKE_BUILD_TYPE=Release
        exclude:
          - compiler:  # Already tested
              name: GCC
            sanitize:
              name: ", ASan, Debug"
          - compiler:
              name: ${{ inputs.skip_ubuntu_libcxx && 'Clang, libc++' }}
    uses: ./.github/workflows/compile-run-01.yml
    with:
      name: ${{ matrix.compiler.name }}${{ matrix.sanitize.name }}
      runs_on: hse-cpp-2024-lin-prod
      timeout_minutes: ${{matrix.compiler.timeout_minutes || inputs.compile_run_timeout_minutes}}
      working_directory: ${{inputs.working_directory}}
      compiler_command: ${{matrix.compiler.command}}
      compiler_version_flags: ${{matrix.compiler.version-flags}}
      compiler_msvc_env_prepare:
      flags: ${{matrix.compiler.flags}} ${{matrix.sanitize.flags}}
      run_prefix: ${{matrix.sanitize.run-prefix}}
      cmake_flags: ${{matrix.sanitize.cmake-flags}}
      cmake_build_flags: ${{matrix.sanitize.cmake-build-flags}}
      simple_compilation_name: ${{inputs.simple_compilation_name}}
      simple_compilation_mode: ${{matrix.sanitize.simple-mode}}
      simple_compilation_extra_tus: ${{inputs.simple_compilation_extra_tus}}

  compile-run-win:
    needs: [compile-run-lin]
    strategy:
      matrix:
        compiler:
          - name: ", 64-bit"
            msvc-env-prepare: vcvars64.bat
          - name: ", 32-bit"
            msvc-env-prepare: vcvars32.bat
        sanitize:
          - name: ", Debug"
            simple-mode: msvc-debug
            cmake-build-flags: --config Debug
          - name: ", Release"
            simple-mode: msvc-release
            cmake-build-flags: --config Release
    uses: ./.github/workflows/compile-run-01.yml
    with:
      name: MSVC${{ matrix.compiler.name }}${{ matrix.sanitize.name }}
      runs_on: hse-cpp-2024-win-prod
      timeout_minutes: ${{inputs.compile_run_msvc_timeout_minutes || inputs.compile_run_timeout_minutes}}
      working_directory: ${{inputs.working_directory}}
      compiler_command: cl
      compiler_version_flags:
      compiler_msvc_env_prepare: ${{matrix.compiler.msvc-env-prepare}}
      flags: ${{matrix.compiler.flags}} ${{matrix.sanitize.flags}}
      run_prefix: ${{matrix.sanitize.run-prefix}}
      cmake_flags: ${{matrix.sanitize.cmake-flags}}
      cmake_build_flags: ${{matrix.sanitize.cmake-build-flags}}
      simple_compilation_name: ${{inputs.simple_compilation_name}}
      simple_compilation_mode: ${{matrix.sanitize.simple-mode}}
      simple_compilation_extra_tus: ${{inputs.simple_compilation_extra_tus}}

  compile-run-mac:
    needs: [compile-run-win]
    strategy:
      matrix:
        sanitize:
          - name: ", ASan, Debug"
            flags: -g -fsanitize=undefined -fno-sanitize-recover=all -fsanitize=address -DEXPECT_ASAN
            simple-mode: gcc-debug
            cmake-flags: -DCMAKE_BUILD_TYPE=Debug
          - name: ", Release"
            flags:
            simple-mode: gcc-release
            cmake-flags: -DCMAKE_BUILD_TYPE=Release
    uses: ./.github/workflows/compile-run-01.yml
    with:
      name: Apple Clang${{ matrix.sanitize.name }}
      runs_on: hse-cpp-2024-mac-prod
      working_directory: ${{inputs.working_directory}}
      timeout_minutes: ${{inputs.compile_run_apple_timeout_minutes || inputs.compile_run_timeout_minutes}}
      compiler_command: clang++
      compiler_version_flags: --version
      compiler_msvc_env_prepare:
      flags: ${{matrix.compiler.flags}} ${{matrix.sanitize.flags}}
      run_prefix: ${{matrix.sanitize.run-prefix}}
      cmake_flags: ${{matrix.sanitize.cmake-flags}}
      cmake_build_flags: ${{matrix.sanitize.cmake-build-flags}}
      simple_compilation_name: ${{inputs.simple_compilation_name}}
      simple_compilation_mode: ${{matrix.sanitize.simple-mode}}
      simple_compilation_extra_tus: ${{inputs.simple_compilation_extra_tus}}
