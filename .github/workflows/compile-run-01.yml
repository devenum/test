# Reused workflow instead of a composite action for better logs: steps are kept separate
on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      runs_on:
        type: string
        required: true
      working_directory:
        type: string
        required: true
      timeout_minutes:
        type: number
        required: true
      compiler_command:
        type: string
        required: true
      compiler_version_flags:
        type: string
        required: true
      compiler_msvc_env_prepare:
        type: string
        required: true
      flags:
        type: string
        required: true
      run_prefix:
        type: string
        required: true
      cmake_flags:
        type: string
        required: true
      cmake_build_flags:
        type: string
        required: true
      simple_compilation_name:
        type: string
        required: true
      simple_compilation_mode:
        type: string
        required: true
      simple_compilation_extra_tus:
        type: string
        required: true
      run_test_data_extra_args:
        type: string
        default:
jobs:
  compile-run:
    name: ${{inputs.name}}
    runs-on: ${{inputs.runs_on}}
    timeout-minutes: ${{inputs.timeout_minutes}}
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}
    steps:
      - name: Download solution
        uses: actions/checkout@v4

      - name: Prepare MSVC environment
        shell: cmd
        run: |
          call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\${{inputs.compiler_msvc_env_prepare}}"
          set >${{github.env}}
        if: ${{inputs.compiler_msvc_env_prepare}}

      - name: Print cmake version
        run: cmake --version
      - name: Print compiler version
        run: ${{inputs.compiler_command}} ${{inputs.compiler_version_flags}}

      # Non-MSVC simple compilation set-up
      - name: Configure non-MSVC debug compilation flags
        run: echo "SIMPLE_COMPILATION_FLAGS=-std=c++20 -pedantic-errors -Wall -Wextra -Werror -o ${{inputs.simple_compilation_name}} -g" >> ${{github.env}}
        if: ${{inputs.simple_compilation_name && inputs.simple_compilation_mode == 'gcc-debug'}}
      - name: Configure non-MSVC release compilation flags
        run: echo "SIMPLE_COMPILATION_FLAGS=-std=c++20 -pedantic-errors -Wall -Wextra -Werror -o ${{inputs.simple_compilation_name}} -O3 -DNDEBUG" >> ${{github.env}}
        if: ${{inputs.simple_compilation_name && inputs.simple_compilation_mode == 'gcc-release'}}
      # MSVC simple compilation set-up
      - name: Configure MSVC debug compilation flags
        run: echo "SIMPLE_COMPILATION_FLAGS=/std:c++20 /W4 /WX /permissive- /EHsc /D_CRT_SECURE_NO_WARNINGS /Fe:${{inputs.simple_compilation_name}} /Zi /RTC1 /MDd" >> ${{github.env}}
        if: ${{inputs.simple_compilation_name && inputs.simple_compilation_mode == 'msvc-debug'}}
      - name: Configure MSVC release compilation flags
        run: echo "SIMPLE_COMPILATION_FLAGS=/std:c++20 /W4 /WX /permissive- /EHsc /D_CRT_SECURE_NO_WARNINGS /Fe:${{inputs.simple_compilation_name}} /O2 /D NDEBUG /MD" >> ${{github.env}}
        if: ${{inputs.simple_compilation_name && inputs.simple_compilation_mode == 'msvc-release'}}

      - name: Configure simple compilation command
        run: echo "SIMPLE_COMPILATION_COMMAND=${{inputs.compiler_command}} ${{inputs.flags}} ${{env.SIMPLE_COMPILATION_FLAGS}}" >> ${{github.env}}
        # Always run, even without 'simple_compilation_name'

      # Simple compilation
      - name: Run compiler
        run: ${{env.SIMPLE_COMPILATION_COMMAND}} ${{inputs.simple_compilation_name}}.cpp ${{inputs.simple_compilation_extra_tus}}
        working-directory: ${{inputs.working_directory}}
        if: ${{inputs.simple_compilation_name}}
      # CMake compilation
      - name: Run CMake configuration
        run: cmake . -DCMAKE_CXX_COMPILER="${{inputs.compiler_command}}" -DEXTRA_CXX_FLAGS="${{inputs.flags}}" ${{inputs.cmake_flags}} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=.
        working-directory: ${{inputs.working_directory}}
        if: ${{!inputs.simple_compilation_name}}
      - name: Build via CMake
        run: cmake --build . --verbose ${{inputs.cmake_build_flags}}
        working-directory: ${{inputs.working_directory}}
        if: ${{!inputs.simple_compilation_name}}

      - name: Run tests via run-test-data.sh with a solution command as an argument
        run: bash ./run-test-data.sh ${{inputs.run_prefix}} ./${{inputs.simple_compilation_name}} ${{inputs.run_test_data_extra_args}}
        working-directory: ${{inputs.working_directory}}
        if: ${{inputs.simple_compilation_name}}
        # 'env.SIMPLE_COMPILATION_COMMAND' is already provided
      - name: Run tests via run-test-data.sh with a solution command prefix as an argument
        run: bash ./run-test-data.sh ${{inputs.run_prefix}} ${{inputs.run_test_data_extra_args}}
        working-directory: ${{inputs.working_directory}}
        if: ${{!inputs.simple_compilation_name}}
        # 'env.SIMPLE_COMPILATION_COMMAND' is already provided
